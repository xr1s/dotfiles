// help coc-config.txt
{
  // 不提示是否为 snippet（默认有一个后缀的 ~ 表示为 snippet）
  "suggest.snippetIndicator": "",
  // 需要按一下 Tab 来选中第一个不全列表选项
  // 补全提示
  "suggest.completionItemKindLabels": {
    "keyword": "",
    "variable": "",
    "value": "",
    "operator": "Ψ",
    "function": "ƒ",
    "reference": "渚",
    "constant": "",
    "method": "",
    "struct": "",
    "class": "",
    "interface": "",
    "text": "",
    "enum": "",
    "enumMember": "",
    "module": "",
    "color": "",
    "property": "",
    "field": "料",
    "unit": "",
    "event": "鬒",
    "file": "",
    "folder": "",
    "snippet": "",
    "typeParameter": "",
    "default": ""
  },
  // 错误、警告等提示符
  // 特殊表情字符在不同端表现不一致（字符宽度的判断不同），可能会导致终端显示异常
  // 主要是存在 U+FE0F VARIATION SELECTOR 的情况，Windows Terminal 会显示异常
  "diagnostic.errorSign": "│",
  "diagnostic.warningSign": "│",
  "diagnostic.infoSign": "│",
  "diagnostic.hintSign": "│",
  "diagnostic.showUnused": true,
  "diagnostic.checkCurrentLine": true, // 当光标处无诊断信息时，显示该行的报错
  // virtualText 是在行末显示报错等诊断信息
  "diagnostic.virtualText": true,
  "diagnostic.virtualTextCurrentLineOnly": false,
  // 将折行替换为特殊字符
  "diagnostic.virtualTextLineSeparator": " ⏎  ",
  // 分割正常代码和报错的特殊前缀
  "diagnostic.virtualTextPrefix": " ▪ ",
  "diagnostic.floatConfig": {
    "focusable": false,
  },
  "codeLens.enable": false,
  // 保存时自动格式化
  "coc.preferences.formatOnSave": true,
  "coc.source.file.triggerCharacters": [
    "/"
  ],
  // 启用 neovim 自带的 semanticTokens 功能
  "semanticTokens.enable": true,
  "http.proxy": "http://localhost:7897",
  // C++ Clangd
  "clangd.enabled": true,
  "clangd.arguments": [
    "--all-scopes-completion",
    "--background-index",
    "--clang-tidy",
    "--completion-style=detailed",
    "--header-insertion=iwyu",
    "-j=64",
    "--limit-results=0",
    "--malloc-trim",
    "--pch-storage=memory"
  ],
  "clangd.fallbackFlags": [],
  "clangd.checkUpdates": true,
  "clangd.compilationDatabaseCandidates": [
    "${workspaceFolder}",
    "${workspaceFolder}/build"
  ],
  // Java JDT
  "java.format.onType.enabled": false,
  "java.referencesCodeLens.enabled": true,
  "java.signatureHelp.enabled": true,
  // Go GoPLS
  "go.goplsOptions": {
    "analyses": {
      "SA5008": false,
    },
    "gofumpt": true,
    "hints": {
      "assignVariableTypes": true,
      "compositeLiteralFields": true,
      "compositeLiteralTypes": true,
      "constantValues": true,
      "functionTypeParameters": true,
      "parameterNames": true,
      "rangeVariableTypes": true
    },
    "local": "-local",
    "semanticTokens": true,
    "staticcheck": true,
    "usePlaceholders": true,
    "hoverKind": "FullDocumentation"
  },
  // Python Pyright
  "basedpyright.enable": true,
  "basedpyright.disableOrganizeImports": true,
  "basedpyright.analysis.diagnosticSeverityOverrides": {},
  // Ruby Solargraph
  "solargraph.diagnostics": true,
  "solargraph.formatting": true,
  "solargraph.transport": "stdio",
  // Rust: rust-analyzer {{{
  "rust-analyzer.enable": true,
  // 进入 terminal 时直接进入插入模式
  "rust-analyzer.terminal.startinsert": true,
  // 启用 clippy 作为 linter
  "rust-analyzer.check.command": "clippy",
  // 使用 vimspector 作为调试运行时（未安装 vimspector）
  "rust-analyzer.debug.runtime": "vimspector",
  "rust-analyzer.debug.vimspector.configuration.name": "launch",
  // 补全列表展示同一个工作区下定义的不可访问的私有成员
  // 因为个人经常忘记写 pub，或者 pub 不够激进，需要慢慢调整
  "rust-analyzer.completion.privateEditable.enable": false,
  // 开启实验中的错误报告特性
  "rust-analyzer.diagnostics.experimental.enable": true,
  // 不允许使用 import crate::* 自动合并导入，避免找不到来源
  "rust-analyzer.imports.merge.glob": false,
  // 导入子模块也使用 self 前缀，"crate" 则不添加 self 前缀
  // 最多使用一个 super，其它情况使用绝对路径
  "rust-analyzer.imports.prefix": "self",
  // 隐藏的自动解引用和 ref，举个例子（摘自 rust-analyzer 测试用例）：
  // let (x,) = &(0,); 会被插入 let &(ref x,) = &(0,);
  // let 模式匹配 mut ref 和 match 中的逻辑同理
  "rust-analyzer.inlayHints.bindingModeHints.enable": false,
  // (默认) 闭合括号的提示要求括号对的距离最少 25 行才开启
  "rust-analyzer.inlayHints.closingBraceHints.minLines": 25,
  // 只有在闭包是语句块 || {} 的时候才提示闭包返回类型（默认不提示）
  "rust-analyzer.inlayHints.closureReturnTypeHints.enable": "with_block",
  // 提示函数参数和返回的生命周期，但是忽略显式标出或只有一个引用的简单情况
  "rust-analyzer.inlayHints.lifetimeElisionHints.enable": "skip_trivial",
  // 使用参数名作为生命周期名（默认使用 '0, '1, '2, ... 递增数字）
  "rust-analyzer.inlayHints.lifetimeElisionHints.useParameterNames": true,
  // 对于 let 或类似模式匹配解构赋值是否提示实际被赋值的类型
  "rust-analyzer.inlayHints.typeHints.enable": true,
  // 是否隐藏赋值语句中，右侧返回 Self 的关联函数的类型提示，也包含 Unit 类型，注意包含枚举子类型生成的函数，如
  // let s = String::new(); let ip = std::net::IpAddr::V4(todo!()); let u = chrono::Utc;
  // 对于未直接写完整泛型参数的类型则会提示，如 let v = Vec::new();
  "rust-analyzer.inlayHints.typeHints.hideNamedConstructor": true,
  // }}}
  // Scala Metals
  "metals.statusBarEnabled": true,
  "metals.enable": false,
  // TypeScript tsserver {{{
  "tsserver.enable": true,
  // （默认）
  "tsserver.locale": null,
  "javascript.inlayHints.enumMemberValues.enabled": true,
  "javascript.inlayHints.functionLikeReturnTypes.enabled": true,
  "javascript.inlayHints.parameterNames.enabled": "all",
  "javascript.inlayHints.parameterTypes.enabled": true,
  "javascript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,
  "javascript.inlayHints.propertyDeclarationTypes.enabled": true,
  "javascript.inlayHints.variableTypes.enabled": true,
  // （默认）开启格式化
  "typescript.format.enabled": true,
  "typescript.inlayHints.enumMemberValues.enabled": true,
  "typescript.inlayHints.functionLikeReturnTypes.enabled": true,
  "typescript.inlayHints.parameterNames.enabled": "all",
  "typescript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,
  "typescript.inlayHints.parameterTypes.enabled": true,
  "typescript.inlayHints.propertyDeclarationTypes.enabled": true,
  "typescript.inlayHints.variableTypes.enabled": true,
  // }}}
  // Vim Vim-LSP
  "vimlsp.indexes.count": 100,
  "vimlsp.indexes.gap": 1,
  "languageserver": {
    "jedi": {
      "enable": false,
      "filetypes": [
        "python"
      ],
      "command": "jedi-language-server",
      "initializationOptions": {
        "codeAction": {
          "enable": false,
        },
        "completion": {
          "enable": true,
        },
        "diagnostic": {
          "enable": false,
        },
        "hover": {
          "enable": true,
        },
      }
    },
    "ruff": {
      "enable": true,
      "filetypes": [
        "python"
      ],
      "command": "ruff",
      "args": [
        "server"
      ],
      "rootPatterns": [
        "pyproject.toml"
      ],
      "initializationOptions": {
        "settings": {
          "lint": {
            "extendSelect": [
              "I"
            ],
          },
          "organizeImports": true,
          "lineLength": 120,
        }
      },
    },
    "tinymist": {
      "enable": true,
      "filetypes": [
        "typst"
      ],
      "command": "tinymist",
      "settings": {
        "formatterMode": "typstyle",
        "preview": {
          "browsing": {
            "args": [
              "--data-plane-host=127.0.0.1:0",
              "--invert-colors=auto",
              "--open"
            ],
          }
        }
      },
    },
  }
}
// vim: foldmethod=marker
